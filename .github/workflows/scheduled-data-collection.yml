name: Scheduled PUBG Data Collection

on:
  # Run multiple times every evening (Prague time)
  schedule:
    - cron: '0 18 * * *'  # 20:00 Prague time (8 PM)
    - cron: '0 19 * * *'  # 21:00 Prague time (9 PM)
    - cron: '0 20 * * *'  # 22:00 Prague time (10 PM)
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      days_to_collect:
        description: 'Number of days to collect (default: 1)'
        required: false
        default: '1'
        type: string

# Add permissions for the workflow
permissions:
  contents: write  # Allow pushing commits
  actions: read    # Allow reading workflow info

jobs:
  collect-pubg-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚚 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for better commit context
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        echo "📦 Installing Node.js dependencies..."
        npm install
        echo "✅ Dependencies installed successfully"
      
    - name: 🎮 Run PUBG data collection for all players
      env:
        PUBG_API_KEY: ${{ secrets.PUBG_API_KEY }}
        PLATFORM: 'steam'
      run: |
        echo "🎯 Starting PUBG data collection for all players..."
        echo "⏰ Current time: $(date)"
        echo "📅 Collecting data for the last ${{ github.event.inputs.days_to_collect || '1' }} day(s)"
        
        # List of all players to collect data for
        PLAYERS=("Kilma9" "Mar-0" "Hyottokko" "Baron_Frajeris" "codufus" "Veru_13")
        
        # Create backup of existing main data file
        if [ -f "data.json" ]; then
          cp data.json "data_backup_$(date +%Y-%m-%d_%H-%M-%S).json"
          echo "💾 Created backup of existing data"
        fi
        
        # Collect data for each player
        for PLAYER in "${PLAYERS[@]}"; do
          echo "👤 Collecting data for player: $PLAYER"
          export PLAYER_NAME="$PLAYER"
          
          # Run the PUBG data collection script for this player
          node PUBG.JS "$PLAYER"
          
          echo "✅ Data collection completed for $PLAYER"
          
          # Add delay between players to respect rate limits
          if [ "$PLAYER" != "Veru_13" ]; then
            echo "⏳ Waiting 30 seconds before next player to avoid rate limits..."
            sleep 30
          fi
        done
        
        echo "🎉 All players data collection completed!"
        echo "📊 Data files created:"
        ls -la data*.json 2>/dev/null || echo "No data files found"
        
        # Create timestamp file for accurate sync tracking
        cat > last-sync.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "pragueTime": "$(TZ='Europe/Prague' date '+%Y-%m-%d %H:%M:%S')",
          "trigger": "${{ github.event_name }}",
          "workflow": "scheduled-data-collection"
        }
        EOF
        
        echo "🕒 Created timestamp file: last-sync.json"
        
    - name: 📈 Generate collection report
      run: |
        echo "## 🎮 PUBG Multi-Player Data Collection Report" > collection_report.md
        echo "**Collection Date:** $(date)" >> collection_report.md
        echo "**Trigger:** ${{ github.event_name }}" >> collection_report.md
        echo "" >> collection_report.md
        
        PLAYERS=("Kilma9" "Mar-0" "Hyottokko" "Baron_Frajeris" "codufus" "Veru_13")
        TOTAL_MATCHES=0
        
        for PLAYER in "${PLAYERS[@]}"; do
          DATA_FILE="data_${PLAYER}.json"
          if [ "$PLAYER" == "Kilma9" ]; then
            DATA_FILE="data.json"  # Main player uses data.json
          fi
          
          echo "### 👤 $PLAYER" >> collection_report.md
          
          if [ -f "$DATA_FILE" ]; then
            MATCHES_COUNT=$(jq length "$DATA_FILE" 2>/dev/null || echo "0")
            TOTAL_MATCHES=$((TOTAL_MATCHES + MATCHES_COUNT))
            echo "- **Matches:** $MATCHES_COUNT" >> collection_report.md
            
            # Get latest match date
            LATEST_MATCH=$(jq -r '.[0].date // "No matches"' "$DATA_FILE" 2>/dev/null)
            echo "- **Latest Match:** $LATEST_MATCH" >> collection_report.md
          else
            echo "- **Status:** ❌ No data file found" >> collection_report.md
          fi
          echo "" >> collection_report.md
        done
        
        echo "**Total Matches Across All Players:** $TOTAL_MATCHES" >> collection_report.md
        
        cat collection_report.md
        
    - name: 💾 Commit and push updated data
      run: |
        # Configure git with GitHub Actions bot
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add all data files
        git add data*.json
        git add last-sync.json 2>/dev/null || echo "No sync timestamp to add"
        git add collection_report.md 2>/dev/null || echo "No collection report to add"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "📋 No new data to commit"
        else
          # Commit with detailed message
          COMMIT_MSG="🎮 Automated PUBG data collection - $(date +%Y-%m-%d)"
          git commit -m "$COMMIT_MSG"
          
          # Push with retry logic
          for i in {1..3}; do
            if git push; then
              echo "✅ Data committed and pushed to repository"
              break
            else
              echo "❌ Push attempt $i failed, retrying..."
              sleep 5
            fi
          done
        fi
        
    - name: 🚀 Deploy to webzdarma.cz (if data updated)
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      if: success()
      with:
        server: ${{ secrets.WEBZDARMA_FTP_SERVER }}
        username: ${{ secrets.WEBZDARMA_FTP_USERNAME }}
        password: ${{ secrets.WEBZDARMA_FTP_PASSWORD }}
        local-dir: ./
        server-dir: ${{ secrets.WEBZDARMA_FTP_DIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.env
          **/PUBG.JS
          **/.github/**
          **/collection_report.md
          **/data_backup_*.json
          
    - name: 📧 Notify on failure
      if: failure()
      run: |
        echo "❌ PUBG Data collection failed!"
        echo "🔍 Check the following:"
        echo "   - PUBG API key validity"
        echo "   - Network connectivity"
        echo "   - PUBG API rate limits"
        echo "   - Player name and platform correctness"
        
    - name: 🎉 Success notification
      if: success()
      run: |
        echo "✅ PUBG Data collection completed successfully!"
        echo "🌐 Dashboard updated at: http://kilma-pubg.wz.cz:8080/"
        echo "📊 Fresh stats available for analysis"